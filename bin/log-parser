#!/usr/bin/env node

var command = require('commander');
var winston = require('winston');

var packageJSON = require('../package.json');
var LogParser = require('../');
var config = require('../src/config.js');


// setup commander options and menu
command
  .version(packageJSON.version)
  .description(packageJSON.description)
  .option('-d, --debug', 'debug mode')
  .option('-s, --start [MM/DD/YYYY]', 'start date for log match')
  .option('-e, --end [MM/DD/YYYY]', 'end date for log match')
  .option('-q, --query [regex]', 'query regular expression match')
  .option('-f, --format [format]', 'format of logs', 'combined')
  .option('-d, --directory [path]', 'directory of log files', './log')
  .option('-t, --transform [filepath]', 'filepath of transform function')
  .option('-o, --output [filepath]', 'filepath of output', './log-parser.out.csv')
  .parse(process.argv);


// get logger and setup log levels
var log = new (winston.Logger)({
  transports: [
    new (winston.transports.Console)({
      level: 'info',
      timestamp: true,
      colorize: true
    })
  ]
});

// check for debug mode flag
if (command.debug) log.transports.console.level = 'debug';


// get start and end date to query log records
var start = (command.start) ? new Date(command.start) : null;
if ((null !== start) && isNaN(start)) {
  log.error('invalid start date');
  process.exit();
}

var end = (command.end) ? new Date(command.end) : null;
if ((null !== end) && isNaN(end)) {
  log.error('invalid end date');
  process.exit();
}

// get new log parser
var parser = new LogParser();

parser.on('debug', log.debug);
parser.on('info', log.info);
parser.on('warn', log.warn);
parser.on('error', log.error);

// setup log parser
parser.init(config, command.format, command.transform);

// parse directory
parser.parse(command.directory, start, end, command.query, command.output);