#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var readline = require('readline');
var url = require('url');

var argv = require('minimist')(process.argv.slice(2));
var winston = require('winston');
var async = require('async');
var csv = require('csv');

var config = require('../src/config.js');
var logFileMatch = new RegExp(config.default.logFileMatch.filename, config.default.logFileMatch.modifiers);

var log = new (winston.Logger)({
  transports: [
    new (winston.transports.Console)({
      level: 'info',
      timestamp: true,
      colorize: true
    })
  ]
});

if (argv.d || argv.debug) {
  log.transports.console.level = 'debug';
}

// get start date to query log records
var start = new Date();
if (argv.s) start = new Date(argv.s);
else if (argv.start) start = new Date(argv.start);

if (!(start instanceof Date)) {
  log.error('invalid start date');
  process.exit();
}

// get log format
var format = "combined";
if (argv.f) format = argv.f;
else if (argv.format) format = argv.format;

if ((config.local.logMatch && config.local.logMatch && 'undefined' === typeof config.local.logMatch[format]) && ('undefined' === typeof config.default.logMatch[format])) {
  log.error('invalid log match format');
  process.exit();
}


// get log format config
var formatConfig;
if (config.local.logMatch && 'undefined' !== typeof config.local.logMatch[format]) {
  formatConfig = config.local.logMatch[format];
} else {
  formatConfig = config.default.logMatch[format];
}
var formatExp = new RegExp(formatConfig.format);


var months = {"Jan":1,"Feb":2,"Mar":3,"Apr":4,"May":5,"Jun":6,"Jul":7,"Aug":8,"Sep":9,"Oct":10,"Nov":11,"Dec":12};

var directory = './log';
if (argv.d) file = argv.d;
else if (argv.dir) file = argv.dir;

log.info('parsing log directory', directory, 'file match', logFileMatch);

// get log filenames from log directory
fs.readdir(directory, function(err, files) {
  if (err) return log.error('problem reading directory', directory, err);

  var logFiles = [];

  files.forEach(function(filename) {
    if ('' !== filename.match(logFileMatch)[0]) {
      log.debug('log file match', filename);
      logFiles.push(filename);
    }
  });

  log.debug('parsing', logFiles.length, 'log files');


  var q = async.queue(function (filename, callback) {
    log.debug('parsing log file', filename);

    var instream = fs.createReadStream(path.resolve(directory, filename));

    var rl = readline.createInterface({
      input: instream,
      terminal: false
    });

    rl.on('line', function(line) {
      var logLine = {};

      // build logLine from line parts
      var lineParts = formatExp.exec(line);
      Object.keys(formatConfig.params).forEach(function(param, i) {
        switch(param) {
          case 'date':
            var slashSplit = lineParts[(i+1)].split('/');
            var colonSplit = slashSplit[2].split(':');
            var spaceSplit = colonSplit[3].split(' ');
            logLine[param] = new Date(months[slashSplit[1]] + "/" + slashSplit[0] + "/" + colonSplit[0] + " " + colonSplit[1] + ":" + colonSplit[2] + ":" + colonSplit[3] + " " + spaceSplit[1]);
            break;
          case 'url':
            logLine[param] = url.parse(lineParts[(i+1)], true);
            break;
          default:
            logLine[param] = lineParts[(i+1)];
            break;
        }
      });

      // fixme temp code for specific purpose ------

      if (start.getDate() != logLine['date'].getDate() || start.getMonth() != logLine['date'].getMonth() || start.getFullYear() != logLine['date'].getFullYear()) return;

      // todo write logLine match and output


      //if (start.getDate() != date.getDate() || start.getMonth() != date.getMonth() || start.getFullYear() != date.getFullYear()) return;
      //
      //var method = parsedLine[5].substr(1);

      // fixme temp code for specific purpose ------
    });

    rl.on('close', function() {
      log.debug('done parsing log file', filename);
      callback();
    });
  }, 1);

  q.drain = function() {
    log.info('done parsing log directory', directory, 'file match', logFileMatch);
  };

  q.push(logFiles);
});