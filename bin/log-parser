#!/usr/bin/env node

var fs = require('fs');
var readline = require('readline');

var argv = require('minimist')(process.argv.slice(2));
var winston = require('winston');

var config = require('../src/config.js');
var logFileMatch = new RegExp(config.default.logFileMatch.filename, config.default.logFileMatch.modifiers);

var log = new (winston.Logger)({
  transports: [
    new (winston.transports.Console)({
      level: 'info',
      timestamp: true,
      colorize: true
    })
  ]
});

if (argv.d || argv.debug) {
  log.transports.console.level = 'debug';
}

// get start date to query log records
var start = new Date();
if (argv.s) start = new Date(argv.s);
else if (argv.start) start = new Date(argv.start);

if (!(start instanceof Date)) {
  log.error('invalid start date');
  process.exit();
}

var months = {"Jan":1,"Feb":2,"Mar":3,"Apr":4,"May":5,"Jun":6,"Jul":7,"Aug":8,"Sep":9,"Oct":10,"Nov":11,"Dec":12};

var directory = './log';
if (argv.d) file = argv.d;
else if (argv.dir) file = argv.dir;

log.info('parsing log directory', directory, 'file match', logFileMatch);

// get log filenames from log directory
fs.readdir(directory, function(err, files) {
  if (err) return log.error('problem reading directory', directory, err);

  var logFiles = [];

  files.forEach(function(filename) {
    if ('' !== filename.match(logFileMatch)[0]) {
      log.debug('log file match', filename);
      logFiles.push(filename);
    }
  });

  log.debug('parsing', logFiles.length, 'log files');


  var q = async.queue(function (filename, callback) {
    var instream = fs.createReadStream(__dirname + '/../log/' + file);

    var rl = readline.createInterface({
      input: instream,
      terminal: false
    });

    rl.on('line', function(line) {
      // fixme temp code for specific use case and testing

      var params = [];
      var parsedLine = line.split(" ");

      var dayTime = parsedLine[3].substr(1,parsedLine[3].length).split("/");
      var yearTime = dayTime[2].split(":");
      var offset = parsedLine[4].substr(0, parsedLine[4].length-1);

      var date = new Date(months[dayTime[1]] + "/" + dayTime[0] + "/" + yearTime[0] + " " + yearTime[1] + ":" + yearTime[2] + ":" + yearTime[3] + " " + offset);

      if (start.getDate() != date.getDate() || start.getMonth() != date.getMonth() || start.getFullYear() != date.getFullYear()) return;

      var method = parsedLine[5].substr(1);

      if ("POST" != method) return;

      var url = parsedLine[6];
      var referrer = parsedLine[10].substr(1, parsedLine[10].length - 2);

      var rcode = getQueryParam('rcode', url);
      var goto = getQueryParam('a', url);
      var cid = getQueryParam('utm_cid', url);
      var scode = getQueryParam('utm_scode', url);

      if (rcode && 4 < rcode.length && scode && 7 < scode.length && cid && 10 < cid.length) {
        log.debug('parsed log message', line, date, url, referrer);
        return ++success;
      }

      log.error('trouble parsing params', url, referrer, rcode, goto, cid, scode);
      ++error;
    });

    rl.on('close', function() {
      log.info('finished analyzing log file');
      log.info(success + ' success, ' + error + ' error messages for ' + start);
      callback();
    });
  }, 1);

  q.drain = function() {
    log.info('done parsing log directory', directory, 'file match', logFileMatch);
  };

  q.push(logFiles);
});